* Conceitos gerais e organização dos dados:

O maior  problema do programa original e o motivo pelo qual decidi
refazer era como que o fluxo de dados era tratado, este era mantido
como uma sequência baseada nos OPCODES sendo lidos da memória, fazendo
assim com que os barramentos fossem somente enfeite e o conceito de
clock fosse impossível de implementar de uma forma minimamente fiel (e
com isso diversas outras coisas como pipelines), nesse primeiro
momento o foco era encontrar um modelo para simular este comportamento
e construir todo o resto encima disto, algo que foi surpreendentemente
complexo uma vez que levamos em conta a necessidade de funcionar em um
ambiente dinâmico (para contrução dos circuitos). 
O programa no momento tem a capacidade de simular o trânsito de
informações pelos barramentos e o controle de fluxo destas
informações, deixando de lado a idéia de instruções únicas como
controlador de frequência das operações  e tentando chegar em um ponto
mais próximo da realidade.  


** As principais  limitações atuais:
- A unidade de controle não congue interpretar OPCODES ainda, somente microcodes (que são tratados como opcodes  para demosntração somente)
- Não foi criado o módulo para simulação da memória ainda
- Somente é possível utilizar uma unidade de controle
- Flags da ALU ainda não foram implementadas

** O programa:

*** Componentes:
Existem quatro elementos básicos atualmente para o programa:
Registrador, Bus, Unidade de controle e Alu. Existem algumas coisas
que parecem não ter sentido, mas elas serão explicadas mais à frente
ou quando nos encontrarmos para discutir. 
**** Overview

***** Bus:
O elemento mais "baixo" da hierarquia é o bus, ele guarda somente duas informações: Quantidade de bits e a informação em trânsito em si.

***** Registrador:
O registrador é o segundo mais baixo na "hierarquia" e este guarda os seguintes valores:
- Quantidade de bits
- Id
- Informação armazenada
- Vetor de ponteiros para os barramentos de entrada
- Vetor de ponteiros para os barramentos de saída

***** Alu:
A Alu é o segundo mais alto na "hierarquia" e guarda os seguintes valores:
- 3 ponteiros para registradores

***** Unidade de controle:
A unidade de controle é a mais alta atualmente, ela consiste nos seguintes valores:
- Ponteiro para seu registrador interno
- Mapa contendo uma chave e ponteiro para os barramentos
- Mapa contendo uma chave e uma tupla que por sua vez contêm um ponteiro para um registrador e dois bools(um para cada estado de input e output do registrador)
- Mapa contendo uma cahve e um ponteiro para as alus
- Contadores da quantidade de chaves em cada mapa
obs: Dos quatro a unidade de controle é a única que necessita de templates explícitos na sua construção, tendo ele a forma de <bits da microinstrução, bits do operador/operando>

**** Construção e operações dos componentes:
***** Unidade de controle:
****** Construção:
A sua construção é feita de acordo com os seguintes códigos:

#+BEGIN_Src C++
//definição do template
template<size_t m_inst_b, size_t oper_b>class control_unit

//construtor
control_unit() : cu_reg(), buses(),
		   regists_in_out(), map_reg_counter(0),
		   map_bus_counter(0), map_alu_counter(0){}

/***********************************************************************************************************************/
n

//Exemplo de instantiação com um microcode de 2 bits e operador/operando de 4 bits:
control_unit<2,4> cu;
//Construção e assignment de seu registrador:
cu.cu_reg = cu.get_register(cu.make_regist(12));
#+END_Src

****** Construção dos outro componentes:

A unidade de controle também cria (e deve sempre criar, teoricamente) todos os outros componentes. Os contrutores que não são chamados por meio da unidade de controle nunca devem ser usados fora em casos que facilite testes, como as interfaces não estão 100% no entanto vou apresentar os construtores "propietários" para esclarecimento.

******* Bus:

#+BEGIN_Src C++
//construtores
  bus(int bits) : bits(bits), info() {}
  bus(int inf, int bits) : info(inf), bits(bits) {}

//construtor pelo unidade de controle:
size_t make_bus(int bits)

//construção por meio da unidade de controle:
cu.make_bus(12);

#+END_Src 

******* Registrador:

#+BEGIN_Src C++
//construtores
regist() : bits(), info() , in() , out(){}
regist(size_t bits,size_t id) :bits(bits), id(id), info(), in(), out() {}

//construtor pela unidade de controle:
size_t make_regist(int bits)

//construção por meio da unidade de controle:
cu.make_regist(12);
#+END_Src

******* Alu:

#+BEGIN_Src C++
//construtores
alu() : A(), B(), Z() {}
alu(std::shared_ptr<regist> Z, std::shared_ptr<regist> B, std::shared_ptr<regist> A) : A(A), B(B), Z(Z){}

//construtor por meio da unidade de controle:
size_t make_alu(std::shared_ptr<regist> A, std::shared_ptr<regist> B, std::shared_ptr<regist> Z)

//construção por meio da unidade de controle:
cu.make_alu(cu.get_register(cu.make_regist(12)),
            cu.get_register(cu.make_regist(12)),
	    cu.get_register(cu.make_regist(12)));
#+END_Src

****** Operações:
******* Controle de subordinados:
Diferente dos outros componentes a unidade de controle tem um número de operações que funcionam como "setters" para os outros, estas novamente sendo a forma preferível(e no futuro, única) de acessar os elementos "abaixo" dela. Como são muitos e pequenos para enumerar de um por um, eles serão todos expostos aqui.

#+BEGIN_Src C++
//lembrando que estas funções pertencem à classe da control_unit:
template<size_t m_inst_b, size_t oper_b> class control_unit

//Retorna um ponteiro para o registrador com o id dado:
  std::shared_ptr<regist> get_register(size_t id)

//Retorna o valor booleano relativo ao input do registrador com o id dado:
  bool get_register_in(size_t id)

//Retorna o valor booleano relativo ao output do registrador com o id dado:
  bool get_register_out(size_t id)

//Retorna um ponteiro para o bus com o id dado:
  std::shared_ptr<bus> get_bus(size_t id)

//Retorna um ponteiro para a alu com o id dado:
  std::shared_ptr<alu> get_alu(size_t id)

//Atribui o valor booleano de verdadeiro para o input do registrador com o id dado:
  void set_in(size_t id) //Esta geralmente fica abstraída no código do ciclo de execução

//Atribui o valor booleano de verdadeiro para o output do registrador com o id dado:
  void set_out(size_t id) //Esta geralmente fica abstraída no código do ciclo de execução

//A função que junta set_in e set_out para transferencias binárias:
  void assignment(size_t id_reg1, size_t id_reg2)

//Soma os valores nos registradores A e B da ALU com id dado e armazena o resultado no registrador Z
  void add(size_t id); // Esta geralmente fica abstraída nos microcodes e não é usada diretamente

#+END_Src

******* Controle do ciclo de execução:
Atualmente a CU é responsável por controlar a frequencia do ciclo de execução, estas são as funções referentes à ele. Lembrando que como OPCODES não foram implementados ainda, os microcodes agem como tal, e como OPCODES não estão disponíveis é necessaŕio tanto o operador quanto o operando nas operações de movimentação.

#+BEGIN_Src C++
//lembrando que estas funções pertencem à classe da control_unit:
template<size_t m_inst_b, size_t oper_b> class control_unit

// Inicia a execução do ciclo, chama execute() inicialmente e depois simula a movimentação pelos barramentos:
void cycle()

/* Lê o microcode atualmente no registrador e dependendo da instrução executa a soma por add() ou seta as flags de input e output dos registradores adequados por meio de assignment()/set_in() e set_out() */ :
void execute()

#+END_Src

***** Alu
****** Operações

#+BEgin_Src C++
//Lembrando que todas estas fazem aprte da classe alu:
class alu

//Efetua a soma dos registradores A e B, e armazena o resultado no registrador Z
  void add()

//Efetua a subtração dos registradores A e B, e armazena o resultado no registrador Z
  void sub()
#+END_Src

***** Registrador
****** Operações

#+BEgin_Src C++
//Lembrando que todas estas fazem aprte da classe regist:
class regist

//Conecta o barramento suprido por meio de um shared_ptr(um ponteiro, efetivamente) ao seu output:
  void link_out(std::shared_ptr<bus> arg)

//Remove o barramento suprido por meio de um shared_ptr(um ponteiro, efetivamente) ao seu output:
  void remove_link_out(std::shared_ptr<bus> arg) // Tem bugs ainda, cuidado se for usar

//Conecta o barramento suprido por meio de um shared_ptr(um ponteiro, efetivamente) ao seu input:
  void link_in(std::shared_ptr<bus> arg)

//Remove o barramento suprido por meio de um shared_ptr(um ponteiro, efetivamente) ao seu input:
  void remove_link_in(std::shared_ptr<bus> arg) // Tem bugs ainda, cuidado se for usar

/*Atribui um valor diretamente ao registrador, tanto por meio de um int ou de um bitset. 
Nos dois casos o valor será ajustado para a quantidade de bits do registrador. */
  void set(int arg) 
  void set(std::bitset<max_bits> arg) //Tem bugs ainda, cuidado se for usar

#+END_Src

***** Bus
****** Operações

#+BEgin_Src C++
//Lembrando que todas estas fazem parte da classe bus:
class bus

//Atribui um valor diretamente ao bus, o valor será ajustado para a quantidade de bits do registrador.
  void set(int arg)
#+END_Src

*** Exemplos:
**** Soma simples:

#+Begin_Src C++ 
#include <iostream>
#include  "atoms.hpp"
using namespace std;


int main(){
/* construção de uma unidade de controle com microcode de 4 bits e operador/operando de 4 bits 
e constução e atribuição de seu registrador interno com 12 bits*/
  control_unit<4, 4> cu;
  cu.cu_reg = cu.get_register(cu.make_regist(12));

/* construção de uma alu com todos os seus registradores com 12 bits, 
note que make_regist retorna o id do registrador, 
então é necessário chamar get_register para conseguir um shared_ptr para o mesmo.*/
  cu.make_alu(cu.get_register(cu.make_regist(12)),
	      cu.get_register(cu.make_regist(12)),
	      cu.get_register(cu.make_regist(12)));

// Cria dois registradores
  cu.make_regist(12);
  cu.make_regist(12);


/* Note que até agora foram criados 6 registradores, os registradores "livres" são os dois últimos, 
logo sei que suas keys serão 4 e 5 e com isso posso definir seus valores diretamente 
(não é algo que deve ser feito quando a estrutura estiver mais organizada, 
mas por enquanto é o mais rápido para demonstrar)*/
  cu.get_register(4)->set(0xffe);
  cu.get_register(5)->set(0x001);

// Cria um bus e atribui seu shared_ptr para "bu"
  auto bu = cu.get_bus(cu.make_bus(12));

/* Adiciona todos os inputs e outputs dos registradores desta unidade de controle ao bus definido previamente. 
A única coisa que está sendo feita aqui é uma iteração sobre todos os registradores e chamando link_in(bu) e 
link_out(bu) em cada, a maior verbosidade ocorre pois não criei ainda um acessor específico para range-for's.*/
  for(auto& item:cu.regists_in_out){
    (get<0>(item.second))->link_in(bu);
    (get<0>(item.second))->link_out(bu);
  }

// Atribui o valor em hexadecimal 114 para o registrador da unidade de controle. O primeiro dígito(0x1, 0b0001) se refere à instrução de "assignment", o segundo dígito se refere à destinação e o terceiro à origem(1<-4). Note que 1 é o registrador A da ALU.
  cu.cu_reg->set(0x114);
  cu.cycle();
  
  // for(auto  i : cu.regists_in_out){
  //   cout << "id: " << get<0>(i)  << "  "  << endl
  // 	 << "val: "
  // 	 << bitset<12>(get<0>(i.second)->info.to_ulong()) << endl;
	 
  // }

// 2 <- 5. Note que 2 é o registrador B da ALU.
  cu.cu_reg->set(0x125);
  cu.cycle();
  // for(auto  i : cu.regists_in_out){
  //   cout << "id: " << get<0>(i) << endl
  // 	 << "val: "
  // 	 << bitset<12>(get<0>(i.second)->info.to_ulong()) << endl;
    
  // }

// O primeiro dígito(0x2, 0b0002) se refere à instrução de "add", o segundo dígito se refere à id da ALU, como só temos uma esta é 0. O terceiro é ignorado.
  cu.cu_reg->set(0x200);
  cu.cycle();
  // for(auto  i : cu.regists_in_out){
  //   cout << "id: " << get<0>(i) << endl
  // 	 << "val: "
  // 	 << bitset<12>(get<0>(i.second)->info.to_ulong()) << endl;
    
  // }
  
  return 0;
}
#+End_Src

No output após rodar o programa podemos ver os seguintes valores(após formatação): 

---------------------------------------------------------------------------------
/******* REGISTER 4  ->  BUS ********

bus antes: 0000000000000000000000000000000000000000000000000000000000000000
bus depois: 0000000000000000000000000000000000000000000000000000111111101101

/******* BUS -> REGISTER 1 ********

register  antes: 0000000000000000000000000000000000000000000000000000000000000000
register depois: 0000000000000000000000000000000000000000000000000000111111101101


/******* REGISTER 5  ->  BUS ********

bus antes: 0000000000000000000000000000000000000000000000000000111111101101
bus depois: 0000000000000000000000000000000000000000000000000000000000001111

/******* BUS -> REGISTER 2 ********

register  antes: 0000000000000000000000000000000000000000000000000000000000000000
register depois: 0000000000000000000000000000000000000000000000000000000000001111


A:0000000000000000000000000000000000000000000000000000111111101101
B:0000000000000000000000000000000000000000000000000000000000001111
Z:0000000000000000000000000000000000000000000000000000111111111100
----------------------------------------------------------------------------------

Eles mostram a movimentação das informações pelos barramentos e registradores, seguidos do resultado da soma feita no final. 

**** Soma "zerada" por overflow
Podemos usar o mesmo código acima somente fazendo estas modificações:
cu.get_register(4)->set(0xffe) e cu.get_register(4)->set(0x001).  
Teremos este output após formatação:

----------------------------------------------------------------------------------
/******* REGISTER 4  ->  BUS ********

bus antes: 0000000000000000000000000000000000000000000000000000000000000000
bus depois: 0000000000000000000000000000000000000000000000000000111111111110

/******* BUS -> REGISTER 1 ********

register  antes: 0000000000000000000000000000000000000000000000000000000000000000
register depois: 0000000000000000000000000000000000000000000000000000111111111110


/******* REGISTER 5  ->  BUS ********

bus antes: 0000000000000000000000000000000000000000000000000000111111111110
bus depois: 0000000000000000000000000000000000000000000000000000000000000001

/******* BUS -> REGISTER 2 ********

register  antes: 0000000000000000000000000000000000000000000000000000000000000000
register depois: 0000000000000000000000000000000000000000000000000000000000000001


A:0000000000000000000000000000000000000000000000000000111111111110
B:0000000000000000000000000000000000000000000000000000000000000001
Z:0000000000000000000000000000000000000000000000000000000000000000
----------------------------------------------------------------------------------

Podemos ver que como o registrador do Z é de 12 bits, uma soma que dá
em 2^12 vai ser 0,  uma vez que seu único dígito diferente de zero
(1 * 2^12) não pode ser  representado em 12 bits.

**** Overflow simples
Podemos novamente usar o mesmo código acima somente fazendo estas
modificações:  cu.get_register(4)->set(0xffe) e
cu.get_register(4)->set(0x0fe).  
Teremos este output após formatação:

----------------------------------------------------------------------------------
/******* REGISTER 4  ->  BUS ********/

bus antes: 0000000000000000000000000000000000000000000000000000000000000000
bus depois: 0000000000000000000000000000000000000000000000000000111111111110

/******* BUS -> REGISTER 1 ********/

register  antes: 0000000000000000000000000000000000000000000000000000000000000000
register depois: 0000000000000000000000000000000000000000000000000000111111111110

/******* REGISTER 5  ->  BUS ********/

bus antes: 0000000000000000000000000000000000000000000000000000111111111110
bus depois: 0000000000000000000000000000000000000000000000000000000011111110

/******* BUS -> REGISTER 2 ********/

register  antes: 0000000000000000000000000000000000000000000000000000000000000000
register depois: 0000000000000000000000000000000000000000000000000000000011111110


A:0000000000000000000000000000000000000000000000000000111111111110
B:0000000000000000000000000000000000000000000000000000000011111110
Z:0000000000000000000000000000000000000000000000000000000011111100	
----------------------------------------------------------------------------------

